// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: instrument/v1/trading_pair.proto

package instrumentv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TradingPairStatus int32

const (
	TradingPairStatus_UNSPECIFIED TradingPairStatus = 0
	TradingPairStatus_ACTIVE      TradingPairStatus = 1
	TradingPairStatus_PASSIVE     TradingPairStatus = 2
)

// Enum value maps for TradingPairStatus.
var (
	TradingPairStatus_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ACTIVE",
		2: "PASSIVE",
	}
	TradingPairStatus_value = map[string]int32{
		"UNSPECIFIED": 0,
		"ACTIVE":      1,
		"PASSIVE":     2,
	}
)

func (x TradingPairStatus) Enum() *TradingPairStatus {
	p := new(TradingPairStatus)
	*p = x
	return p
}

func (x TradingPairStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradingPairStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_instrument_v1_trading_pair_proto_enumTypes[0].Descriptor()
}

func (TradingPairStatus) Type() protoreflect.EnumType {
	return &file_instrument_v1_trading_pair_proto_enumTypes[0]
}

func (x TradingPairStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradingPairStatus.Descriptor instead.
func (TradingPairStatus) EnumDescriptor() ([]byte, []int) {
	return file_instrument_v1_trading_pair_proto_rawDescGZIP(), []int{0}
}

type TradingPairItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid           string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Symbol        string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	DecimalPlaces string `protobuf:"bytes,3,opt,name=decimal_places,json=decimalPlaces,proto3" json:"decimal_places,omitempty"`
}

func (x *TradingPairItem) Reset() {
	*x = TradingPairItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instrument_v1_trading_pair_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingPairItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingPairItem) ProtoMessage() {}

func (x *TradingPairItem) ProtoReflect() protoreflect.Message {
	mi := &file_instrument_v1_trading_pair_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingPairItem.ProtoReflect.Descriptor instead.
func (*TradingPairItem) Descriptor() ([]byte, []int) {
	return file_instrument_v1_trading_pair_proto_rawDescGZIP(), []int{0}
}

func (x *TradingPairItem) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *TradingPairItem) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TradingPairItem) GetDecimalPlaces() string {
	if x != nil {
		return x.DecimalPlaces
	}
	return ""
}

type TradingPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string            `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Buyable   bool              `protobuf:"varint,2,opt,name=buyable,proto3" json:"buyable,omitempty"`
	Sellable  bool              `protobuf:"varint,3,opt,name=sellable,proto3" json:"sellable,omitempty"`
	Status    TradingPairStatus `protobuf:"varint,4,opt,name=status,proto3,enum=instrument.v1.TradingPairStatus" json:"status,omitempty"`
	Left      *TradingPairItem  `protobuf:"bytes,5,opt,name=left,proto3" json:"left,omitempty"`
	Right     *TradingPairItem  `protobuf:"bytes,6,opt,name=right,proto3" json:"right,omitempty"`
	Threshold *Threshold        `protobuf:"bytes,7,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *TradingPair) Reset() {
	*x = TradingPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instrument_v1_trading_pair_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingPair) ProtoMessage() {}

func (x *TradingPair) ProtoReflect() protoreflect.Message {
	mi := &file_instrument_v1_trading_pair_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingPair.ProtoReflect.Descriptor instead.
func (*TradingPair) Descriptor() ([]byte, []int) {
	return file_instrument_v1_trading_pair_proto_rawDescGZIP(), []int{1}
}

func (x *TradingPair) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *TradingPair) GetBuyable() bool {
	if x != nil {
		return x.Buyable
	}
	return false
}

func (x *TradingPair) GetSellable() bool {
	if x != nil {
		return x.Sellable
	}
	return false
}

func (x *TradingPair) GetStatus() TradingPairStatus {
	if x != nil {
		return x.Status
	}
	return TradingPairStatus_UNSPECIFIED
}

func (x *TradingPair) GetLeft() *TradingPairItem {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *TradingPair) GetRight() *TradingPairItem {
	if x != nil {
		return x.Right
	}
	return nil
}

func (x *TradingPair) GetThreshold() *Threshold {
	if x != nil {
		return x.Threshold
	}
	return nil
}

var File_instrument_v1_trading_pair_proto protoreflect.FileDescriptor

var file_instrument_v1_trading_pair_proto_rawDesc = []byte{
	0x0a, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x1a, 0x1d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x62, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x73, 0x22, 0xb1, 0x02, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x75, 0x79, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x69, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x36, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2a, 0x47, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41,
	0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x02, 0x22, 0x08, 0x08, 0x03, 0x10, 0xff, 0xff, 0xff, 0xff,
	0x07, 0x42, 0xb0, 0x01, 0x0a, 0x2b, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x64, 0x65,
	0x6d, 0x6f, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x10, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x76, 0x31, 0x3b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x49, 0x58, 0x58, 0xaa, 0x02, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x19, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_instrument_v1_trading_pair_proto_rawDescOnce sync.Once
	file_instrument_v1_trading_pair_proto_rawDescData = file_instrument_v1_trading_pair_proto_rawDesc
)

func file_instrument_v1_trading_pair_proto_rawDescGZIP() []byte {
	file_instrument_v1_trading_pair_proto_rawDescOnce.Do(func() {
		file_instrument_v1_trading_pair_proto_rawDescData = protoimpl.X.CompressGZIP(file_instrument_v1_trading_pair_proto_rawDescData)
	})
	return file_instrument_v1_trading_pair_proto_rawDescData
}

var file_instrument_v1_trading_pair_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_instrument_v1_trading_pair_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_instrument_v1_trading_pair_proto_goTypes = []any{
	(TradingPairStatus)(0),  // 0: instrument.v1.TradingPairStatus
	(*TradingPairItem)(nil), // 1: instrument.v1.TradingPairItem
	(*TradingPair)(nil),     // 2: instrument.v1.TradingPair
	(*Threshold)(nil),       // 3: instrument.v1.Threshold
}
var file_instrument_v1_trading_pair_proto_depIdxs = []int32{
	0, // 0: instrument.v1.TradingPair.status:type_name -> instrument.v1.TradingPairStatus
	1, // 1: instrument.v1.TradingPair.left:type_name -> instrument.v1.TradingPairItem
	1, // 2: instrument.v1.TradingPair.right:type_name -> instrument.v1.TradingPairItem
	3, // 3: instrument.v1.TradingPair.threshold:type_name -> instrument.v1.Threshold
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_instrument_v1_trading_pair_proto_init() }
func file_instrument_v1_trading_pair_proto_init() {
	if File_instrument_v1_trading_pair_proto != nil {
		return
	}
	file_instrument_v1_threshold_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_instrument_v1_trading_pair_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*TradingPairItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instrument_v1_trading_pair_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TradingPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_instrument_v1_trading_pair_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_instrument_v1_trading_pair_proto_goTypes,
		DependencyIndexes: file_instrument_v1_trading_pair_proto_depIdxs,
		EnumInfos:         file_instrument_v1_trading_pair_proto_enumTypes,
		MessageInfos:      file_instrument_v1_trading_pair_proto_msgTypes,
	}.Build()
	File_instrument_v1_trading_pair_proto = out.File
	file_instrument_v1_trading_pair_proto_rawDesc = nil
	file_instrument_v1_trading_pair_proto_goTypes = nil
	file_instrument_v1_trading_pair_proto_depIdxs = nil
}
